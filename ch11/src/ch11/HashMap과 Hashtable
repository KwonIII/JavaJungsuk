HashMap과 Hashtable - 순서X, 중복(키X,값O)
-Map 인터페이스를 구현. 데이터를 키와 값의 쌍으로 저장
-HashMap(동기화X)은 Hashtable(동기화O)의 신버전

>HashMap
-Map인터페이스를 구현한 대표적인 컬렉션 클래스
-순서를 유지하려면, LinkedHashMap클래스를 사용하면 된다.
>TreeMap
-범위 검색과 정렬에 유리한 컬렉션 클래스
-HashMap보다 데이터 추가, 삭제에 시간이 더 걸림

HashMap의 키(key)와 값(value)
-해싱(hashing)기법으로 데이터를 저장. 데이터가 많아도 검색이 빠르다.
키(key) : 컬렉션 내의 키(key) 중에서 유일해야 한다.
값(value) : 키(key)와 달리 데이터의 중복을 허용

해싱(hashing): 해시함수를 이용해서 데이터를 저장하고 읽어옴
-해시함수(hash function)로 해시테이블(hash table)에 데이터를 저장, 검색
해시함수에 키를 넣으면 해시함수가 키가 저장되어 있는 위치(해시코드(배열의 index))를 알려준다
-해시테이블은 배열과 링크드리스트가 조합된 형태(링크드리스트 여러 개를 배열로 묶은것)
링크드리스트는 변경의 용이성을 위해 사용한 것이고 배열은 데이터의 접근성이 좋아서 사용
>해시테이블에 저장된 데이터를 가져오는 과정
1.키로 해시함수를 호출해서 해시코드를 얻는다.
2.해시코드(해시함수의 반환값)에 대응하는 링크드리스트를 배열에서 찾는다.
3.링크드리스트에서 키와 일치하는 데이터를 찾는다.
*해시함수는 같은 키에 대한 항상 같은 해시코드를 반환해야 한다.
서로 다른 키일지라도 같은 값의 해시코드를 반환할 수도 있다.
