스트림(Stream)
>다양한 데이터 소스(컬렉션,배열 등)를 표준화된 방법으로 다루기 위한것
스트림: 데이터의 연속적인 흐름
>스트림이 제공하는 기능-중간 연산과 최종 연산
1.스트림만들기 2.중간연산(0~n번가능) 3.최종연산(0~1번)

*중간 연산 - 연산 결과가 스트림인 연산. 반복적으로 적용가능
*최종 연산 - 연산 결과가 스트림이 아닌 연산. 단 한번만 적용가능(스트림의 요소를 소모)

stream.distinct().limit(5).sorted().forEach(System.out::println)
		중간연산      중간연산  중간연산           최종연산(한번)
>스트림은 데이터소스(데이터원본)로 부터 데이터를 읽기만 할 뿐 변경하지 않는다.
>스트림은 Iterator처럼 일회용이다.(필요하면 다시 스트림을 생성해야 함)
>최종 연산 전까지 중간연산이 수행되지 않는다. - 지연된 연산
>스트림은 작업을 내부반복으로 처리한다.
>스트림의 작업을 병렬로 처리 - 병렬스트림
>기본형 스트림 - IntStream, LongStream, DoubleStream
-오토박싱, 언박싱의 비효율이 제거됨(Stream<Integer>대신 IntStream사용)
-숫자와 관련된 유용한 메서드를 Stream<T>보다 더 많이 제공

스트림만들기 - 컬렉션
>Collection인터페이스의 stream()으로 컬렉션을 스트림으로 변환
Stream<E> stream() //Collection인터페이스의 메서드

스트림의 중간 연산
>스트림 자르기 - skip(), limit()
Stream<T> skip(long n)	//앞에서부터 n개 건너띄기
Stream<T> limit(long maxSize)	//maxSize이후의 요소는 잘라냄

IntStream intStream = IntStream.rangeClosed(1,10);	//12345678910
intStream.skip(3),limit(5).forEach(System.out::println);	//45678

>스트림의 요소 걸러내기 - filter(), distinct()
Stream<T> filter(Predicate<? super T> predicate)	//조건에 맞지 않는 요소 제거
Stream<T> distinct()	//중복제거

IntStream intStream = IntStream.of(1,2,2,3,3,3,4,5,5,6);
intStream.distinct().forEach(System.out::print);	//123456

IntStream intStream = IntStream.rangeClosed(1,10);	//12345678910
intStream.filter(i->i%2==0).forEach(System.out::print);	//246810

>스트릠 정렬하기 - sorted()
