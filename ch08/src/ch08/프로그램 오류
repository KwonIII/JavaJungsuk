프로그램 오류
-컴파일 에러: 컴파일 할 때 발생하는 에러
-런타임 에러: 실행 할 때 발생하는 에러
-논리적 에러: 작성 의도와 다르게 동작

-자바의 런타임에러(실행중 발생하는 에러)
-에러 : 프로그램 코드에 의해서 수습될 수 없는 심각한 오류
-예외(exception) : 프로그램 코드에 의해서 수습될 수 있는 다소 미약한 오류

-예외처리의 정의와 목적
정의: 프로그램 실행 시 발생할 수 있는 예외의 발생에 대비한 코드를 작성하는 것
목적: 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것

Exception클래스들 -사용자의 실수와 같은 외적인 요인에 의해 발생하는 예외
RuntimeException클래스들 -프로그래머의 실수로 발생하는 예외

try-catch문에서의 흐름
1.try블럭 내에서 예외가 발생한 경우.
-발생한 예외와 일치하는 catch블럭이 있는지 확인한다.
-일치하는 catch블럭을 찾게 되면, 그 catch블럭내의 문장들을 수행하고 전체 try-catch문을 
빠져나가서 그 다음 문장을 계속해서 수행한다. 만일 일치하는 catch블럭을 찾지 못하면, 예외는 처리되지 못한다. -> 프로그램 비정상 종료
-Exception이 선언된 catch블럭은 모든 예외처리(마지막 catch블럭) (Ex) catch(Exception e){}

2.try블럭 내에서 예외가 발생하지 않은 경우,
-catch블럭을 거치지 않고 전체 try-catch문을 빠져나가서 수행을 계속한다.

printStackTrace(): 예외발생 당시의 호출스택(Call Stack)에 있었던 메서드 정보와 
예외 메시지르 ㄹ화면에 출력한다.
getmessage(): 발생한 예외클래스의 인스턴스에 저장된 메시지를 얻을 수 있다.

