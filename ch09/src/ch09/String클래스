String클래스 - 문자열을 다루기 위한 클래스
-String클래스 = 데이터(char[])+메서드(문자열 관련)
-내용을 변경할 수 없는 불변클래스
-덧셈 연산자(+)를 이용한 문자열결합은 성능이 떨어짐. 문자열의 결합이나 
변경이 잦다면, 내용을 변경가능한 StringBuffer사용
문자열을 비교할 때는 equals()를 써야한다.
==를 쓰면 주소 비교가 됨

StringBuffer클래스
-String처럼 문자형 배열(char[])을 내부적으로 가지고 있다.
-그러나, String과 달리 내용을 변경할 수 있다.
StringBuffer sb = new StringBuffer("abc");
sb.append("123");	//sb의 내용 뒤에 "123"을 추가한다.

StringBuffer의 생성자
-배열은 길이 변경불가. 공간이 부족하면 새로운 배열 생성해야 한다.
-StringBuffer는 저장할 문자열의 길이를 고려해서 적절한 크기로 생성해야 한다.
버퍼의 크기를 지정하지 않으면 버퍼의 크기는 16이 된다.

StringBuffer비교
-StringBuffer는 equals()가 오버라이딩 되어있지 않다.(내용비교가 아닌 주소비교)
StringBuffer sb = new StringBuffer("abc");
StringBuffer sb2 = new StringBuffer("abc");

System.out.println(sb==sb2);	//false
System.out.println(sb.equals(sb2));	//false

-StringBuffer를 String으로 변환 후에 equals()로 비교해야 한다.
String s = sb.toString();	//sb를 String으로 변환
String s2 = sb.toString();

System.out.println(s.equals(s2));	//true

StringBuilder
-StringBuffer는 동기화되어 있다. 멀티 쓰레드에 안전(thread-safe)
-멀티쓰레드 프로그램이 아닌 경우, 동기화는 불필요한 성능저하
이럴 땐 StringBuffer대신 StringBuilder를 사용하면 성능 향상
